/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Bone, Group, Mesh, MeshStandardMaterial, SkinnedMesh } from "three";
import { GetColors } from "../../functions/getColors";
import { useControls } from "leva";

type GLTFResult = GLTF & {
  nodes: {
    defaultMaterial_1: SkinnedMesh;
    defaultMaterial_2: SkinnedMesh;
    defaultMaterial_3: SkinnedMesh;
    defaultMaterial001: Mesh;
    defaultMaterial002: Mesh;
    defaultMaterial003: Mesh;
    Knee_PointL: Bone;
    FULL: Bone;
    Knee_PointR: Bone;
  };
  materials: {
    char_material: MeshStandardMaterial;
    backpack_mat: MeshStandardMaterial;
    glass_material: MeshStandardMaterial;
    plastic: MeshStandardMaterial;
    belt_mat: MeshStandardMaterial;
    pipes_knife: MeshStandardMaterial;
  };
};

interface ModelProps {
  scale: Number;
  position: [Number, Number, Number];
  animation: string; // You can specify the type for `animation` if needed
}

export function Cruemate({
  animation,
  scale,
  position,
  ...props
}: ModelProps & JSX.IntrinsicElements["group"]) {
  const group = useRef<Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/models/mate.gltf"
  ) as GLTFResult;
  const { actions } = useAnimations<any>(animations, group);

  // @ts-ignore
  const { selectedValue } = useControls("Color", {
    selectedValue: {
      value: 0, // Default value
      label: "Select Value", // Label for the dropdown
      options: Array.from({ length: 14 }, (_, i) => i), // Create an array from 0 to 13
    },
  });

  useEffect(() => {
    if (materials.char_material) {
      const textures = GetColors({ index: selectedValue });
      materials.char_material.map = textures.baseColor;
      materials.backpack_mat.map = textures.backpackColor;
    }
  }, [selectedValue]);

  useEffect(() => {
    const action = actions[animation];
    if (action) action.reset().fadeIn(0.24).play();
    return () => {
      if (action) action.fadeOut(0.24);
    };
  }, [animation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" scale={scale} position={position}>
        <group name="Main_Rig">
          <group name="defaultMaterial">
            <skinnedMesh
              name="defaultMaterial_1"
              geometry={nodes.defaultMaterial_1.geometry}
              material={materials.char_material}
              skeleton={nodes.defaultMaterial_1.skeleton}
            />
            <skinnedMesh
              name="defaultMaterial_2"
              geometry={nodes.defaultMaterial_2.geometry}
              material={materials.glass_material}
              skeleton={nodes.defaultMaterial_2.skeleton}
            />
            <skinnedMesh
              name="defaultMaterial_3"
              geometry={nodes.defaultMaterial_3.geometry}
              material={materials.plastic}
              skeleton={nodes.defaultMaterial_3.skeleton}
            />
          </group>
          <primitive object={nodes.Knee_PointL} />
          <primitive object={nodes.FULL} />
          <primitive object={nodes.Knee_PointR} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/mate.gltf");
